#+STARTUP: overview
#+TITLE:   Emacs Configuration File

* Basic setup
** Packages and directories
   #+BEGIN_SRC emacs-lisp
     (defconst akp/lisp-directory (concat user-emacs-directory
                                          (convert-standard-filename "lisp")))
     (add-to-list 'load-path akp/lisp-directory)

     (require 'package)
     (setq inhibit-startup-message t)
     (setq package-user-dir "~/.emacs.d/site-packages"
           package-archives '(("org"   . "https://orgmode.org/elpa/")
                              ("gnu"   . "https://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")))

     (package-initialize)

     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (setq backup-directory-alist
           `(("." . ,(concat user-emacs-directory "backups"))))

     (use-package saveplace
       :config
       (setq-default save-place t)
       (setq save-place-file (expand-file-name ".places" user-emacs-directory)))
   #+END_SRC

** Miscellaneous
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 50000000)

     (fset 'yes-or-no-p 'y-or-n-p)
     (setq require-final-newline t
           load-prefer-newer t)

     (setq initial-scratch-message ""
           visible-bell t)

     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
     (setq scroll-conservatively 10000
           scroll-preserve-screen-position t)

     ;; For English keyboard intl., with AltGr dead keys
     (global-set-key (kbd "Å“")   'counsel-M-x)
     (global-set-key (kbd "M-z") 'zap-up-to-char)
   #+END_SRC

** Helper
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)

     (use-package which-key
       :ensure t
       :diminish
       :config (which-key-mode))
   #+END_SRC


* Appearance
** Basics
   #+BEGIN_SRC emacs-lisp
     (when (display-graphic-p)
       (setq initial-frame-alist '((width  . 90)
                                   (height . 50))))

     (set-frame-font "JetBrains Mono 12" nil t)
     (when (string-equal system-type "gnu/linux")
       ;; font for Thai language
       (set-fontset-font t 'unicode "Norasi" nil 'prepend))

     (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
     (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
   #+END_SRC

** Themes and icons
   #+BEGIN_SRC emacs-lisp
     (use-package gruvbox-theme
       :ensure t
       :config
       (load-theme 'gruvbox-dark-medium t))

     (use-package base16-theme
       :disabled
       :config
       (load-theme 'base16-eighties t))

     (use-package all-the-icons
       :ensure t
       :defer 0)

     (use-package all-the-icons-ivy
       :ensure t
       :after all-the-icons
       :config
       (all-the-icons-ivy-setup)
       ;; This makes ivy-rich work when renaming in dired-mode.
       (ivy-set-display-transformer 'read-file-name-internal
                                    'all-the-icons-ivy-file-transformer))

     (use-package all-the-icons-dired
       :disabled ;; not work well with swiper
       :after all-the-icons
       :hook
       (dired-mode . all-the-icons-dired-mode))
   #+END_SRC

** Mode line
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :ensure t
       :hook
       (after-init . doom-modeline-mode)
       :init
       (column-number-mode t)
       :config
       (setq doom-modeline-buffer-file-name-style 'buffer-name))

     (use-package diminish
       :ensure t)
   #+END_SRC

** Line number
   For programming and org mode, always turn on =linum= mode.
   #+BEGIN_SRC emacs-lisp
     (use-package linum
       :ensure t
       :hook
       ((prog-mode org-mode) . linum-on))
   #+END_SRC

   I use a (modified) =linum-new-mode= function from [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#line-numbers][Howard Abrams]]:
   #+BEGIN_SRC emacs-lisp
     (use-package linum-relative
       :ensure t
       :bind
       ("s-k" . linum-new-mode)
       :config
       (defun linum-new-mode ()
         "If line numbers aren't displayed, then display them.
          Otherwise, toggle between absolute and relative numbers."
         (interactive)
         (if linum-mode
             (linum-relative-toggle))
           (linum-mode 1)))
   #+END_SRC


* Buffers
  #+BEGIN_SRC emacs-lisp
    (use-package ibuffer
      :bind
      ("C-x C-b" . ibuffer)
      :hook
      (ibuffer-mode . (lambda () (ibuffer-switch-to-saved-filter-groups "default")))
      :config
      (setq ibuffer-saved-filter-groups
            '(("default"
               ("dired" (mode . dired-mode))
               ("org" (name . "^.*org$"))
               ("magit" (mode . magit-mode))
               ("web" (or (mode . web-mode)
                          (mode . js2-mode)))
               ("shell" (or (mode . eshell-mode)
                            (mode . shell-mode)))
               ("programming" (or
                               (mode . python-mode)
                               (mode . c++-mode)
                               (mode . emacs-lisp-mode)
                               (mode . lisp-mode)))
               ("emacs" (or
                         (name . "^\\*Packages\\*$")
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")
                         (name . "^\\*Error\\*$")
                         (name . "^\\*Warnings\\*$")))
               )))
      (setq ibuffer-show-empty-filter-groups nil
            ibuffer-expert t))
  #+END_SRC


* Motion and searching
** Buffers and files
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t)

     (use-package ivy
       :ensure t
       :after counsel
       :diminish ivy-mode
       :bind
       (("M-x"     . counsel-M-x)
        ("C-x b"   . ivy-switch-buffer)
        ("C-x C-f" . counsel-find-file)
        ("C-c i"   . counsel-imenu)
        ("C-c g"   . counsel-git)
        :map ivy-minibuffer-map
        ("C-l"     . ivy-backward-delete-char)
        ("TAB"     . ivy-alt-done)
        ("RET"     . ivy-alt-done)
        ("C-j"     . ivy-immediate-done))
       :custom
       (ivy-extra-directories '())
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "%d/%d ")
       (setq ivy-display-style 'fancy))
   #+END_SRC

   I use =ivy-rich= package. However, it needs some modifications to
   make it work with =all-the-icons= because the basic customization on
   [[https://github.com/Yevgnen/ivy-rich#1312-add-icons-for-ivy-switch-buffer][Github]] only applies to existing buffers and also has a problem when
   displaying a current match of '.' in the minibuffer.
   #+BEGIN_SRC emacs-lisp
     (use-package ivy-rich
       :ensure t
       :defer 0
       :config
       (ivy-rich-mode 1)
       (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
       (defun all-the-icons-ivy-rich-transformer (s)
         "Must be run after initializing `ivy-rich-mode' so that the
          transformer is constructed, and `ivy-switch-buffer' must be
          defined in `ivy-rich-display-transformers-list'"
         (let* ((icon (all-the-icons-ivy-buffer-transformer s))
                (rich (ivy-rich--ivy-switch-buffer-transformer s))
                (info (substring rich (string-width s) (string-width rich))))
           (concat icon info)))
       (ivy-set-display-transformer 'ivy-switch-buffer
                                    'all-the-icons-ivy-rich-transformer)
       (ivy-set-display-transformer 'counsel-find-file
                                    'all-the-icons-ivy-rich-transformer))
   #+END_SRC

** Search in the current buffer
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :after ivy
       :bind
       (("C-s"     . swiper)
        ("C-r"     . swiper)
        ("C-c C-r" . ivy-resume)
        :map ivy-minibuffer-map
        ("C-s"     . ivy-next-line)
        ("C-r"     . ivy-previous-line))
       :config
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
   #+END_SRC

** Goto-line-preview
   #+BEGIN_SRC emacs-lisp
     (use-package goto-line-preview
       :ensure t
       :bind
       ([remap goto-line] . goto-line-preview))
   #+END_SRC

** Jump
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind
       (("C-:"   . avy-goto-char)
        ("C-;"   . avy-goto-word-1)
        ("C-c ;" . avy-goto-char-timer))
       :config
       (setq avy-keys (number-sequence ?a ?z)))
   #+END_SRC

** Windows
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :diminish
       :bind
       ("C-x q" . ace-window)
       :config
       (setq aw-keys '(?j ?k ?l ?\; ?a ?s ?d ?f)))
   #+END_SRC

** Hydra
   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :ensure t)
   #+END_SRC


* Editing
** Basics
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Undo and redo
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :diminish
       :config
       (global-undo-tree-mode 1)
       (defalias 'redo 'undo-tree-redo))
   #+END_SRC

** Parentheses
*** Highlight and coloring
    #+BEGIN_SRC emacs-lisp
      (use-package paren
        :custom
        (show-paren-priority -1)
        :config
        (show-paren-mode t)
        (add-hook 'after-save-hook 'check-parens nil t)
        (setq show-paren-delay 0)
        (set-face-background 'show-paren-match (face-background 'default))
        (set-face-foreground 'show-paren-match "#afa")
        (set-face-attribute  'show-paren-match nil :weight 'extra-bold)
        (set-face-background 'show-paren-mismatch "#a33")
        (set-face-attribute  'show-paren-mismatch nil :weight 'extra-bold))

      (use-package rainbow-delimiters
        :ensure t
        :hook
        (prog-mode . rainbow-delimiters-mode))
    #+END_SRC

*** Smartparens
    I define =delete-char-or-unwrap-sexp= and
    =backward-kill-word-or-unwrap-sexp= and bind them to the basic
    delete/kill keys to help me work with parentheses more easily.
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
        :ensure t
        :diminish
        :bind
        (("C-)"                      . sp-forward-slurp-sexp)
         ("C-("                      . sp-backward-slurp-sexp)
         ("C-}"                      . sp-forward-barf-sexp)
         ("C-{"                      . sp-backward-barf-sexp)
         ([remap delete-char]        . delete-char-or-unwrap-sexp)
         ([remap backward-kill-word] . backward-kill-word-or-unwrap-sexp))
        :hook
        ((prog-mode . smartparens-mode)
         (org-mode  . smartparens-mode))
        :config
        (require 'paren)
        (defun delete-char-or-unwrap-sexp (N &optional KILLFLAG)
          (interactive "p\nP")
          (if (show-paren--default)
              (if (not (sp-unwrap-sexp N))
                  (delete-char N KILLFLAG))
            (delete-char N KILLFLAG)))
        (defun backward-kill-word-or-unwrap-sexp (arg)
          (interactive "p")
          (if (show-paren--default)
              (if (not (sp-backward-unwrap-sexp arg))
                  (backward-kill-word arg))
            (backward-kill-word arg)))
        (require 'smartparens-config))
    #+END_SRC

** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind
       ("C-." . er/expand-region))
   #+END_SRC

** Unfill paragraph
   #+BEGIN_SRC emacs-lisp
     (use-package unfill
       :ensure t
       :bind
       ("M-Q" . unfill-paragraph))
   #+END_SRC

** Folding and unfolding
   #+BEGIN_SRC emacs-lisp
     (use-package origami
       :ensure t
       :diminish
       :hook
       (prog-mode . (lambda () (origami-mode)))
       :config
       (defhydra hydra-origami (prog-mode-map "C-c f" :hint nil)
         "
         toggle _f_orward    _n_ext fold        _o_pen node    show _a_ll nodes    _R_eset
         _c_ancel            _p_revious fold    ^ ^            show _O_nly node
         "
         ("f" origami-forward-toggle-node)
         ("c" nil :color blue)
         ("n" origami-next-fold)
         ("p" origami-previous-fold)
         ("o" origami-open-node-recursively)
         ("a" origami-open-all-nodes)
         ("O" origami-show-only-node)
         ("R" origami-reset)))
   #+END_SRC

** Highlight some keywords
   #+BEGIN_SRC emacs-lisp
     (use-package prog-mode
       :hook
       (prog-mode . (lambda () (font-lock-add-keywords
                           nil
                           '(("\\(FIX\\|TODO\\|!!!\\):" 1 font-lock-warning-face t))))))
   #+END_SRC

** Eldoc
   #+BEGIN_SRC emacs-lisp
     (use-package eldoc
       :diminish
       :hook
       (prog-mode . turn-on-eldoc-mode))
   #+END_SRC


* Project and code management
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind
       ("C-x g" . magit-status))
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (setq projectile-completion-system 'ivy))

     (use-package counsel-projectile
       :ensure t
       :bind
       ("C-c p" . projectile-command-map)
       :config
       (counsel-projectile-mode 1))
   #+END_SRC

** Dumb jump
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :ensure t
       :bind
       (("M-g o" . dumb-jump-go-other-window)
        ("M-g j" . dumb-jump-go)
        ("M-g b" . dumb-jump-back)
        ("M-g i" . dumb-jump-go-prompt)
        ("M-g x" . dumb-jump-go-prefer-external)
        ("M-g z" . dumb-jump-go-prefer-external-other-window))
       :config
       (setq dumb-jump-selector 'ivy))
   #+END_SRC

** Silversearcher
   #+BEGIN_SRC emacs-lisp
     (use-package ag
       :ensure t)
   #+END_SRC

** Neotree
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t
       :bind
       ([f8] . neotree-toggle)
       :config
       (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
   #+END_SRC


* Completion and checking
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :diminish
       :bind
       ("M-/" . company-complete)
       :hook
       (after-init . global-company-mode)
       :config
       (use-package company-quickhelp
         :ensure t
         :config
         (company-quickhelp-mode 1))
       (setq company-idle-delay 0.2))
   #+END_SRC

** Language Server Protocol
   I haven't really tried [[https://github.com/joaotavora/eglot][Eglot]] yet, but [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] with some
   customization works pretty well for me.
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :ensure t
       :bind
       (:map lsp-mode-map
             ("C-c C-f" . lsp-format-buffer))
       :commands lsp
       :custom
       (lsp-auto-guess-root nil)
       (lsp-prefer-flymake nil))

     (use-package company-lsp
       :ensure t
       :config
       (setq company-lsp-enable-snippet t)
       (push 'company-lsp company-backends))
   #+END_SRC

*** Interface
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-ui
        :ensure t
        :bind
        (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references]  . lsp-ui-peek-find-references))
        :hook
        (lsp-mode  . lsp-ui-mode)
        :custom
        (lsp-ui-doc-enable nil)
        (lsp-prefer-flymake nil))
    #+END_SRC

** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :diminish yas-minor-mode
       :config
       (yas-global-mode 1))
   #+END_SRC

** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t)
   #+END_SRC


* Major modes
** Org
   #+BEGIN_SRC emacs-lisp
     (require 'init-org)
   #+END_SRC

** Lisp
   #+BEGIN_SRC emacs-lisp
     (require 'init-lisp)
   #+END_SRC

** Python
   #+BEGIN_SRC emacs-lisp
     (require 'init-python)
   #+END_SRC

** C/C++
   #+BEGIN_SRC emacs-lisp
     (require 'init-cc)
   #+END_SRC

** CMake
   #+BEGIN_SRC emacs-lisp
     (use-package cmake-mode
       :ensure t)
   #+END_SRC


* Keep everything up to date!
  #+BEGIN_SRC emacs-lisp
    (use-package auto-package-update
      :ensure t
      :config
      (setq auto-package-update-delete-old-versions t)
      (setq auto-package-update-hide-results t)
      (auto-package-update-maybe))
  #+END_SRC


* Show initializing time
  #+BEGIN_SRC emacs-lisp
    (message "Started in %s" (emacs-init-time))
  #+END_SRC
